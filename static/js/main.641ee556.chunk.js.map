{"version":3,"sources":["settings.ts","ctx.ts","constants.ts","components/Game.tsx","components/Paddle.tsx","components/Ball.tsx","components/Battleground.tsx","components/ScoreGround.tsx","index.tsx"],"names":["Color","Events","KeyCode","Direction","Context2D","createContext","Game","ref","createRef","req","keys","Set","state","ball","color","RED","r","x","VIEWPORT_WIDTH","y","VIEWPORT_HEIGHT","vx","vy","paddleTop","BLACK","w","h","paddleBottom","WHITE","scoreGround","update","updateBall","updateHuman","updateComputer","requestAnimationFrame","offsideTop","offsideBot","offsideLineCross","collideLeft","collideRight","contactTop","contactBottom","flewDown","flewTop","setState","GOLD","BALL_RADIUS","HIGLITE_BOT","HIGLITE_TOP","VIEWPORT_PADDING","humanMove","LEFT","RIGHT","NONE","diff","targetPosition","handleKeyDown","keyCode","add","handleKeyUp","delete","window","addEventListener","this","removeEventListener","cancelAnimationFrame","className","width","height","Provider","value","current","getContext","has","LEFT_ARROW","RIGHT_ARROW","Component","Paddle","ctx","context","beginPath","rect","props","fillStyle","strokeStyle","lineWidth","stroke","fill","closePath","PureComponent","contextType","Ball","arc","Math","PI","Battleground","ScoreGround","render","document","getElementById"],"mappings":"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","file":"static/js/main.641ee556.chunk.js","sourcesContent":["export enum Color {\n  BLACK = \"#000\",\n  GREEN = \"#0f0\",\n  BLUE = \"#00f\",\n  RED = \"rgb(255, 0, 0)\",\n  HIGLITE_BOT = \"rgb(162, 0, 0)\",\n  HIGLITE_TOP = \"rgb(240, 65, 65)\",\n  WHITE = \"rgb(255, 255, 255)\",\n  GOLD = \"rgb(232, 180, 65)\",\n}\n\nexport enum Events {\n  KEYUP = \"keyup\",\n  KEYDOWN = \"keydown\",\n}\n\nexport enum KeyCode {\n  LEFT_ARROW = 37,\n  RIGHT_ARROW = 39,\n}\n\nexport enum Direction {\n  LEFT,\n  RIGHT,\n  NONE,\n}\n","import { createContext } from \"react\";\n\nexport let Context2D = createContext<() => CanvasRenderingContext2D>(null!);\n","export const VIEWPORT_WIDTH = 500;\nexport const VIEWPORT_HEIGHT = 700;\nexport const VIEWPORT_PADDING = 10;\nexport const PADDLE_WIDTH = 75;\nexport const PADDLE_HEIGHT = 15;\nexport const PADDLE_SPEED = 5;\nexport const BALL_RADIUS = 10;\nexport const BALL_SPEED = 5;\nexport const MIDLE_LINE = VIEWPORT_HEIGHT / 2 - VIEWPORT_PADDING;\nexport const SCORE_SLICER = 100;\n","import React, { Component, createRef } from \"react\";\nimport { Battleground, ScoreGround, Paddle, Ball } from \"../components\";\nimport { Context2D } from \"../ctx\";\nimport { KeyCode, Direction, Color } from \"../settings\";\nimport {\n  VIEWPORT_WIDTH,\n  VIEWPORT_HEIGHT,\n  VIEWPORT_PADDING,\n  PADDLE_WIDTH,\n  PADDLE_HEIGHT,\n  BALL_RADIUS,\n  BALL_SPEED,\n  PADDLE_SPEED,\n  MIDLE_LINE,\n  SCORE_SLICER,\n} from \"../constants\";\nimport \"./style.css\";\n\ninterface GameState {\n  ball: Circ;\n  paddleTop: Rect;\n  paddleBottom: Rect;\n  scoreGround: Rect;\n}\n\nlet VIEWPORT_HEIGHT_INNER = VIEWPORT_HEIGHT - VIEWPORT_PADDING;\nlet VIEWPORT_WIDTH_INNER = VIEWPORT_WIDTH - VIEWPORT_PADDING;\nlet CENTER_X = VIEWPORT_WIDTH / 2;\n\nexport class Game extends Component<unknown, GameState> {\n  ref = createRef<HTMLCanvasElement>();\n  req: number = null!;\n  keys: Set<number> = new Set();\n\n  state = {\n    ball: {\n      color: Color.RED,\n      r: BALL_RADIUS,\n      x: CENTER_X,\n      y: MIDLE_LINE,\n      vx: 0,\n      vy: BALL_SPEED,\n    },\n    paddleTop: {\n      color: Color.BLACK,\n      w: PADDLE_WIDTH,\n      h: PADDLE_HEIGHT,\n      x: (VIEWPORT_WIDTH - PADDLE_WIDTH) / 2,\n      y: VIEWPORT_PADDING,\n      vx: 0,\n      vy: 0,\n    },\n    paddleBottom: {\n      color: Color.WHITE,\n      w: PADDLE_WIDTH,\n      h: PADDLE_HEIGHT,\n      x: (VIEWPORT_WIDTH - PADDLE_WIDTH) / 2,\n      y: VIEWPORT_HEIGHT - PADDLE_HEIGHT - VIEWPORT_PADDING,\n      vx: 0,\n      vy: 0,\n    },\n    scoreGround: {\n      color: Color.WHITE,\n      w: VIEWPORT_WIDTH - 20,\n      h: MIDLE_LINE,\n      x: 10,\n      y: 10,\n      vx: 0,\n      vy: 0,\n    },\n  };\n\n  update = () => {\n    this.updateBall();\n    this.updateHuman();\n    this.updateComputer();\n    this.req = requestAnimationFrame(this.update);\n  };\n\n  updateBall = () => {\n    let { ball, paddleTop, paddleBottom, scoreGround } = this.state;\n\n    let offsideTop = ball.y - ball.r <= 0;\n    let offsideBot = ball.y + ball.r >= VIEWPORT_HEIGHT;\n    let offsideLineCross =\n      ball.y + ball.r >= VIEWPORT_HEIGHT_INNER || ball.y - ball.r <= 10;\n    let collideLeft = ball.x - ball.r <= 10;\n    let collideRight = ball.x + ball.r >= VIEWPORT_WIDTH_INNER;\n    let contactTop =\n      ball.x + ball.r >= paddleTop.x &&\n      ball.x - ball.r <= paddleTop.x + paddleTop.w &&\n      ball.y - ball.r <= paddleTop.y + paddleTop.h;\n    let contactBottom =\n      ball.x + ball.r >= paddleBottom.x &&\n      ball.x - ball.r <= paddleBottom.x + paddleBottom.w &&\n      ball.y + ball.r >= paddleBottom.y;\n    let flewDown = ball.y - ball.r >= paddleTop.y + 80;\n    let flewTop = ball.y + ball.r <= paddleBottom.y - 60;\n\n    this.setState({\n      ball: {\n        ...ball,\n        ...(offsideLineCross && {\n          color: Color.GOLD,\n        }),\n        ...((offsideTop || offsideBot) && {\n          color: Color.RED,\n          x: CENTER_X,\n          y: MIDLE_LINE,\n          vx: 0,\n          vy: BALL_SPEED,\n        }),\n        ...(collideLeft && {\n          x: BALL_RADIUS + 10,\n          vx: -ball.vx,\n        }),\n        ...(collideRight && {\n          x: VIEWPORT_WIDTH - BALL_RADIUS - 10,\n          vx: -ball.vx,\n        }),\n        ...(contactBottom && {\n          vx: ball.vx + paddleBottom.vx / 2,\n          vy: -BALL_SPEED,\n        }),\n        ...(contactTop && {\n          vx: ball.vx + paddleTop.vx / 2,\n          vy: BALL_SPEED,\n        }),\n      },\n      paddleBottom: {\n        ...paddleBottom,\n        ...(contactBottom && {\n          color: Color.HIGLITE_BOT,\n        }),\n        ...(flewTop && {\n          color: Color.WHITE,\n        }),\n      },\n      paddleTop: {\n        ...paddleTop,\n        ...(contactTop && {\n          color: Color.HIGLITE_TOP,\n        }),\n        ...(flewDown && {\n          color: Color.BLACK,\n        }),\n      },\n      scoreGround: {\n        ...scoreGround,\n        ...(offsideTop && {\n          h:\n            scoreGround.h < VIEWPORT_PADDING + SCORE_SLICER\n              ? MIDLE_LINE\n              : scoreGround.h - SCORE_SLICER,\n        }),\n        ...(offsideBot && {\n          h:\n            scoreGround.h > VIEWPORT_HEIGHT - VIEWPORT_PADDING - SCORE_SLICER\n              ? MIDLE_LINE\n              : scoreGround.h + SCORE_SLICER,\n        }),\n      },\n    });\n\n    this.setState({\n      ball: {\n        ...this.state.ball,\n        x: this.state.ball.x + this.state.ball.vx,\n        y: this.state.ball.y + this.state.ball.vy,\n      },\n    });\n  };\n\n  updateHuman = () => {\n    let { paddleBottom } = this.state;\n    let update = {};\n    switch (this.humanMove) {\n      case Direction.LEFT:\n        let collideLeft = paddleBottom.x <= 20;\n        if (collideLeft) update = { x: 10, vx: 0 };\n        else update = { x: paddleBottom.x - PADDLE_SPEED, vx: -PADDLE_SPEED };\n        break;\n      case Direction.RIGHT:\n        let collideRight =\n          paddleBottom.x + paddleBottom.w >= VIEWPORT_WIDTH_INNER;\n        if (collideRight)\n          update = { x: VIEWPORT_WIDTH - paddleBottom.w - 10, vx: 0 };\n        else update = { x: paddleBottom.x + PADDLE_SPEED, vx: PADDLE_SPEED };\n        break;\n      case Direction.NONE:\n        update = { vx: 0 };\n        break;\n    }\n    this.setState({\n      paddleBottom: {\n        ...paddleBottom,\n        ...update,\n      },\n    });\n  };\n\n  updateComputer = () => {\n    let { paddleTop, ball } = this.state;\n    let diff = -(paddleTop.x + paddleTop.w / 2 - ball.x);\n    if (diff < -PADDLE_SPEED) {\n      diff = -PADDLE_SPEED;\n    } else if (diff > PADDLE_SPEED) {\n      diff = PADDLE_SPEED;\n    }\n    let targetPosition = paddleTop.x + diff;\n    this.setState({\n      paddleTop: {\n        ...paddleTop,\n        x:\n          targetPosition <= 10\n            ? 10\n            : targetPosition + paddleTop.w >= VIEWPORT_WIDTH_INNER\n            ? VIEWPORT_WIDTH - paddleTop.w - 10\n            : targetPosition,\n      },\n    });\n  };\n\n  get humanMove() {\n    if (this.keys.has(KeyCode.LEFT_ARROW)) return Direction.LEFT;\n    else if (this.keys.has(KeyCode.RIGHT_ARROW)) return Direction.RIGHT;\n    else return Direction.NONE;\n  }\n\n  handleKeyDown = ({ keyCode }: KeyboardEvent) => {\n    this.keys.add(keyCode);\n  };\n\n  handleKeyUp = ({ keyCode }: KeyboardEvent) => {\n    this.keys.delete(keyCode);\n  };\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleKeyDown);\n    window.addEventListener(\"keyup\", this.handleKeyUp);\n    this.update();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\n    window.removeEventListener(\"keyup\", this.handleKeyUp);\n    cancelAnimationFrame(this.req);\n  }\n\n  render() {\n    return (\n      <div className=\"gmaeContainer\">\n        <canvas\n          ref={this.ref}\n          width={VIEWPORT_WIDTH}\n          height={VIEWPORT_HEIGHT}\n        />\n        <Context2D.Provider value={() => this.ref.current?.getContext(\"2d\")!}>\n          <Battleground />\n          <ScoreGround {...this.state.scoreGround} />\n          <Ball {...this.state.ball} />\n          <Paddle {...this.state.paddleTop} />\n          <Paddle {...this.state.paddleBottom} />\n        </Context2D.Provider>\n      </div>\n    );\n  }\n}\n","import { PureComponent } from \"react\";\nimport { Context2D } from \"../ctx\";\nimport { Color } from \"../settings\";\n\nexport class Paddle extends PureComponent<Rect & { color: Color }> {\n  static contextType = Context2D;\n\n  componentDidUpdate() {\n    let ctx = this.context();\n\n    ctx.beginPath();\n    ctx.rect(this.props.x, this.props.y, this.props.w, this.props.h);\n    ctx.fillStyle = this.props.color;\n    ctx.strokeStyle = Color.GOLD;\n    ctx.lineWidth = \"10\";\n\n    ctx.stroke();\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  render() {\n    return null;\n  }\n}\n","import { PureComponent } from \"react\";\nimport { Color } from \"../settings\";\nimport { Context2D } from \"../ctx\";\n\nexport class Ball extends PureComponent<Circ & { color: Color }> {\n  static contextType = Context2D;\n\n  componentDidUpdate() {\n    let ctx = this.context();\n\n    ctx.beginPath();\n    ctx.fillStyle = this.props.color;\n    ctx.arc(this.props.x, this.props.y, this.props.r, 0, Math.PI * 2);\n    ctx.fill();\n  }\n\n  render() {\n    return null;\n  }\n}\n","import { PureComponent } from \"react\";\nimport { Context2D } from \"../ctx\";\nimport { VIEWPORT_WIDTH, VIEWPORT_HEIGHT } from \"../constants\";\nimport { Color } from \"../settings\";\n\nexport class Battleground extends PureComponent {\n  static contextType = Context2D;\n\n  componentDidUpdate() {\n    let ctx = this.context();\n\n    ctx.beginPath();\n    ctx.fillStyle = Color.BLACK;\n    ctx.strokeStyle = Color.GOLD;\n    ctx.lineWidth = \"10\";\n\n    ctx.rect(10, 10, VIEWPORT_WIDTH - 20, VIEWPORT_HEIGHT - 20);\n    ctx.stroke();\n    ctx.fill();\n  }\n\n  render() {\n    return null;\n  }\n}\n","import { PureComponent } from \"react\";\nimport { Context2D } from \"../ctx\";\nimport { Color } from \"../settings\";\n\nexport class ScoreGround extends PureComponent<Rect & { color: Color }> {\n  static contextType = Context2D;\n\n  componentDidUpdate() {\n    let ctx = this.context();\n\n    ctx.beginPath();\n    ctx.rect(this.props.x, this.props.y, this.props.w, this.props.h);\n    ctx.fillStyle = this.props.color;\n    ctx.fill();\n  }\n\n  render() {\n    return null;\n  }\n}\n","//import \"./declarations.d.ts\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Game } from \"./components\";\n\nrender(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}